$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: yui
scopeName: source.yui
patterns:
    - include: "#comment"
    - include: "#node"
repository:
    block-collection:
        patterns:
            - include: "#block-sequence"
            - include: "#block-mapping"
    block-mapping:
        patterns:
            - begin: "(type)(:) "
              beginCaptures:
                "1":
                    name: entity.other.attribute-name
                "2":
              end: "(?x)
                (?=
                    \\s* $
                    | \\s+ //
                    | \\s* : (\\s|$)
                )"
              contentName: "constant.language.type.yui"
            - include: "#block-pair"
    block-node:
        patterns:
            - include: "#prototype"
            - include: "#block-scalar"
            - include: "#block-collection"
            - include: "#flow-scalar-plain-out"
            - include: "#flow-node"
    block-pair:
        patterns:
            - begin: "(?x)
                (?=
                    (?x:
                        [^\\s[-?:,\\[\\]{}|>'\"]]
                        | [?:-] \\S
                    )
                    (
                        [^\\s:]
                        | : \\S
                        | \\s+ (?![#\\s])
                    )*
                    \\s* : (\\s|$)
                )"
              end: "(?x)
                (?=
                    \\s* $
                    | \\s+ //
                    | \\s* : (\\s|$)
                )"
              patterns:
                  - include: "#flow-scalar-plain-out-implicit-type"
                  - begin: "(?x)
                        [^\\s[-?:,\\[\\]{}|>'\"]]
                        | [?:-] \\S"
                    beginCaptures:
                        "0":
                            name: entity.name.tag.yaml
                    contentName: entity.name.tag.yaml
                    end: "(?x)
                        (?=
                            \\s* $
                            | \\s+ //
                            | \\s* : (\\s|$)
                        )"
            - match: :(?=\s|$)
              name: punctuation.separator.key-value.mapping.yaml
    block-scalar:
        begin: (?:(\|))([1-9])?([-+])?(.*\n?)
        beginCaptures:
            "1":
                name: keyword.control.flow.block-scalar.literal.yaml
            "3":
                name: constant.numeric.indentation-indicator.yaml
            "4":
                name: storage.modifier.chomping-indicator.yaml
            "5":
                patterns:
                    - include: "#comment"
                    - match: .+
                      name: invalid.illegal.expected-comment-or-newline.yaml
        end: ^(?=\S)|(?!\G)
        patterns:
            - begin: ^([ ]+)(?! )
              end: ^(?!\1|\s*$)
              name: string.unquoted.block.yaml
    block-sequence:
        match: (-)(?!\S)
        name: punctuation.definition.block.sequence.item.yaml
    comment:
        patterns:
            - begin: //
              beginCaptures:
                  "0":
                      name: punctuation.definition.comment.yaml
              end: \n
              name: comment.line.double-slash
    flow-collection:
        patterns:
            - include: "#flow-sequence"
            - include: "#flow-mapping"
    flow-mapping:
        begin: \{
        beginCaptures:
            "0":
                name: punctuation.definition.mapping.begin.yaml
        end: \}
        endCaptures:
            "0":
                name: punctuation.definition.mapping.end.yaml
        name: meta.flow-mapping.yaml
        patterns:
            - include: "#prototype"
            - match: ","
              name: punctuation.separator.mapping.yaml
            - include: "#flow-pair"
    flow-node:
        patterns:
            - include: "#prototype"
            - include: "#flow-collection"
            - include: "#flow-scalar"
    flow-pair:
        patterns:
            - begin: "(?x)
                (?=
                    (?:
                        [^\\s[-?:,\\[\\]{}|>'\"]]
                        | [?:-] [^\\s[\\[\\]{},]]
                    )
                    (
                        [^\\s:[\\[\\]{},]]
                        | : [^\\s[\\[\\]{},]]
                        | \\s+ (?![#\\s])
                    )*
                    \\s*
                    :
                    (\\s|$)
                )"
              end: "(?x)
                (?=
                    \\s* $
                    | \\s+ //
                    | \\s* : (\\s|$)
                    | \\s* : [\\[\\]{},]
                    | \\s* [\\[\\]{},]
                )"
              name: meta.flow-pair.key.yaml
              patterns:
                  - include: "#flow-scalar-plain-in-implicit-type"
                  - begin: "(?x)
                        [^\\s[-?:,\\[\\]{}|>'\"]]
                        | [?:-] [^\\s[\\[\\]{},]]"
                    beginCaptures:
                        "0":
                            name: entity.name.tag.yaml
                    contentName: entity.name.tag.yaml
                    end: "(?x)
                        (?=
                            \\s* $
                            | \\s+ //
                            | \\s* : (\\s|$)
                            | \\s* : [\\[\\]{},]
                            | \\s* [\\[\\]{},]
                        )"
            - include: "#flow-node"
            - begin: :(?=\s|$|[\[\]{},])
              captures:
                  "0":
                      name: punctuation.separator.key-value.mapping.yaml
              end: (?=[},\]])
              name: meta.flow-pair.yaml
              patterns:
                  - include: "#flow-value"
    flow-scalar:
        patterns:
            - include: "#flow-scalar-double-quoted"
            - include: "#flow-scalar-single-quoted"
            - include: "#flow-scalar-plain-in"
    flow-scalar-double-quoted:
        begin: '"'
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.yaml
        end: '"'
        endCaptures:
            "0":
                name: punctuation.definition.string.end.yaml
        name: string.quoted.double.yaml
        patterns:
            - match: \\([0abtnvfre "/\\N_Lp]|x\d\d|u\d{4}|U\d{8})
              name: constant.character.escape.yaml
            - match: \\\n
              name: constant.character.escape.double-quoted.newline.yaml
    flow-scalar-plain-in:
        patterns:
            - include: "#flow-scalar-plain-in-implicit-type"
            - begin: "(?x)
                (?=
                    [^\\s[-?:,\\[\\]{}|>'\"]]
                    | [?:-] \\S)"
              end: "(?x)
                (?=
                    \\s* $
                    | \\s+ //
                    | \\s* : (\\s|$)
                    | \\s* : [\\[\\]{},]
                    | \\s* [\\[\\]{},]
                )"
              patterns:
                  - include: "#inline-yuiscript-in"
                  - include: "#string-unquoted-plain-in"
    flow-scalar-plain-in-implicit-type:
        patterns:
            - captures:
                  "1":
                      name: constant.language.null.yaml
                  "2":
                      name: constant.language.boolean.yaml
                  "3":
                      name: constant.numeric.integer.yaml
                  "4":
                      name: constant.numeric.float.yaml
                  "5":
                      name: constant.other.timestamp.yaml
                  "6":
                      name: constant.language.value.yaml
              match: "(?x)
                        (?:
                          (null|Null|NULL)
                          | (true|True|TRUE|false|False|FALSE)
                          | ((?:
                            [-+]? 0b [0-1_]+
                            | [-+]? 0o  [0-7_]+
                            | [-+]? (?: 0|[1-9][0-9_]*)
                            | [-+]? 0x [0-9a-fA-F_]+
                            ))
                        | ((?:
                          [-+]? (?: [0-9] [0-9_]*)? \\. [0-9.]* (?: [eE] [-+] [0-9]+)?
                          ))
                        )
                        (?=\\s*$|\\s+\/\/|\\s*:(\\s|$)
                          | \\s* : [\\[\\]{},]
                          | \\s* [\\[\\]{},]
                          )"
    flow-scalar-plain-out:
        patterns:
            - include: "#flow-scalar-plain-out-implicit-type"
            - begin: "(?x)
                (?=
                    [^\\s[-?:,\\[\\]{}|>'\"]]
                    | [?:-] \\S)"
              end: "(?x)
                (?=
                    \\s* $
                    | \\s+ //
                    | \\s* : (\\s|$)
                )"
              patterns:
                  - include: "#inline-yuiscript-out"
                  - include: "#string-unquoted-plain-out"
    flow-scalar-plain-out-implicit-type:
        patterns:
            - captures:
                  "1":
                      name: constant.language.null.yaml
                  "2":
                      name: constant.language.boolean.yaml
                  "3":
                      name: constant.numeric.integer.yaml
                  "4":
                      name: constant.numeric.float.yaml
              match: "(?x)
                        (?:
                          (null|Null|NULL)
                          | (true|True|TRUE|false|False|FALSE)
                          | ((?:
                            [-+]? 0b [0-1_]+
                            | [-+]? 0o  [0-7_]+
                            | [-+]? (?: 0|[1-9][0-9_]*)
                            | [-+]? 0x [0-9a-fA-F_]+
                            ))
                        | ((?:
                          [-+]? (?: [0-9] [0-9_]*)? \\. [0-9.]* (?: [eE] [-+] [0-9]+)?
                          ))
                        )
                        (?=\\s*$|\\s+\/\/|\\s*:(\\s|$))"
    flow-scalar-single-quoted:
        begin: "'"
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.yaml
        end: "'(?!')"
        endCaptures:
            "0":
                name: punctuation.definition.string.end.yaml
        name: string.quoted.single.yaml
        patterns:
            - match: "''"
              name: constant.character.escape.single-quoted.yaml
    flow-sequence:
        begin: \[
        beginCaptures:
            "0":
                name: punctuation.definition.sequence.begin.yaml
        end: \]
        endCaptures:
            "0":
                name: punctuation.definition.sequence.end.yaml
        name: meta.flow-sequence.yaml
        patterns:
            - include: "#prototype"
            - match: ","
              name: punctuation.separator.sequence.yaml
            - include: "#flow-pair"
            - include: "#flow-node"
    flow-value:
        patterns:
            - begin: \G(?![},\]])
              end: (?=[},\]])
              name: meta.flow-pair.value.yaml
              patterns:
                  - include: "#flow-node"
    string-unquoted-plain-in:
        patterns:
            - begin: (?=.)
              end: "(?x)
                (?=
                    \\s* $
                    | \\s+ //
                    | \\s* : (\\s|$)
                    | \\s* : [\\[\\]{},]
                    | \\s* [\\[\\]{},]
                )"
              contentName: string.unquoted.plain.in.yaml
    inline-yuiscript-in:
        name: meta.embedded.inline.yuiscript.in
        begin: (?=[@&\$~])
        end: "(?x)
            (?=
                \\s* $
                | \\s+ //
                | ,\\s*
                | \\s* : (\\s|$)
                | \\s* : [\\[\\]{}]
                | \\s* [\\[\\]{}]
            )"
        patterns:
            - include: source.yuiscript
    string-unquoted-plain-out:
        patterns:
            - begin: (?=.)
              end: (?=\s//)|$
              contentName: string.unquoted.plain.out.yaml
    inline-yuiscript-out:
        name: meta.embedded.inline.yuiscript.out
        begin: (?=[@&\$~])
        end: \n
        patterns:
            - include: source.yuiscript
    node:
        patterns:
            - include: "#block-node"
    prototype:
        patterns:
            - include: "#comment"
