$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: YuiScript
scopeName: source.yuiscript
patterns:
    - include: "#escape-syntax"
    - include: "#expression"
repository:
    escape-syntax:
        match: "@@"
        name: constant.character.escape.yui

    # inserted into #expression-operators
    operator-prefix-not:
        name: keyword.operator.logical.yui
        match: not
    operator-infix-call:
        match: \|>
        name: keyword.operator.call.infix.yui
    operator-infix-call-deprecated:
        match: ">>"
        name: keyword.operator.call.infix.yui invalid.illegal # illegal so that it gets red highlight
    operator-string-concat:
        match: \$\+
        name: keyword.operator.concat.yui
    operator-optional:
        match: \?
        name: keyword.operator.optional.infix.yui
    operator-trace:
        match: "!"
        name: keyword.operator.trace.infix.yui
    operator-directive:
        match: (\|)\s*(?:(?:(trace|final|resolve|eval)\b)|([[:alnum:]]+))
        captures:
            "1":
                name: keyword.operator.directive.yui
            "2":
                name: support.directive.yui
            "3":
                name: support.directive.yui invalid.illegal

    # inserted into #identifiers
    bound-variable:
        match: "@[^\\!\\?\\[\\]\\(\\)\\s\\.,\\|]*"
        name: variable.parameter.bound.yui
    resource-variable:
        match: "&[^\\!\\?\\[\\]\\(\\)\\s\\.,\\|]+"
        name: variable.language.resource.yui
    slot-variable:
        match: \$[^\!\?\[\]\(\)\s\.,\\|]+
        name: variable.parameter.slot.yui
    host-functionality:
        match: "~[^\\!\\?\\[\\]\\(\\)\\s\\.,\\|]+"
        name: support.variable.host.yui entity.name.function.yui

    # inserted into #literal
    color-literal:
        match: "#(?:[a-f0-9]{6}|[a-f0-9]{8})\\b"
        name: constant.rgb-value.yui

    # modified javascript expression syntax extracted from:
    # https://github.com/microsoft/vscode/blob/main/extensions/javascript/syntaxes/JavaScript.tmLanguage.json
    expression:
        patterns:
            - include: "#expressionWithoutIdentifiers"
            - include: "#identifiers"
            - include: "#expressionPunctuations"
    expressionWithoutIdentifiers:
        patterns:
            - include: "#string"
            - include: "#comment"
            - include: "#arrow-function"
            - include: "#ternary-expression"
            - include: "#new-expr"
            - include: "#object-literal"
            - include: "#expression-operators"
            - include: "#function-call"
            - include: "#literal"
            - include: "#support-objects"
            - include: "#paren-expression"
    expressionPunctuations:
        patterns:
            - include: "#punctuation-accessor"
    arrow-function:
        patterns:
            - name: meta.arrow.js
              match: (?:(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(\basync)\s+)?([_$[:alpha:]][_$[:alnum:]]*)\s*(?==>)
              captures:
                  "1":
                      name: storage.modifier.async.js
                  "2":
                      name: variable.parameter.js
            # - name: meta.arrow.js
            #   begin: =>
            #   beginCaptures:
            #       "0":
            #           name: storage.type.function.arrow.js
            #   end: ((?<=\}|\S)(?<!=>)|((?!\{)(?=\S)))(?!\/[\/\*])
            #   patterns:
            #       - include: "#expression"
    object-literal:
        name: meta.objectliteral.js
        begin: \{
        beginCaptures:
            "0":
                name: punctuation.definition.block.js
        end: \}
        endCaptures:
            "0":
                name: punctuation.definition.block.js
        patterns:
            - include: "#object-member"
    object-member:
        patterns:
            - name: meta.object.member.js meta.object-literal.key.js
              begin: (?=\[)
              end: (?=:)|((?<=[\]])(?=\s*[\(\<]))
              patterns:
                  - include: "#array-literal"
            - name: meta.object.member.js meta.object-literal.key.js
              begin: (?=[\'\"\`])
              end: (?=:)|((?<=[\'\"\`])(?=((\s*[\(\<,}])|(\s+(as)\s+))))
              patterns:
                  - include: "#string"
            - name: meta.object.member.js meta.object-literal.key.js
              begin: >-
                  (?x)(?=(\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?<!\$)(?:
                    (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
                    (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
                    (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
                    (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
                    (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
                    (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
                    (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
                    (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
                  )(?!\$)))
              end: (?=:)|(?=\s*([\(\<,}])|(\s+as\s+))
              patterns:
                  - include: "#numeric-literal"
            - name: meta.object.member.js
              match: (?![_$[:alpha:]])([[:digit:]]+)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:)
              captures:
                  "0":
                      name: meta.object-literal.key.js
                  "1":
                      name: constant.numeric.decimal.js
            - name: meta.object.member.js
              match: >-
                  (?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:(\s*\/\*([^\*]|(\*[^\/]))*\*\/)*\s*(
                    ((async\s+)?(
                      (function\s*[(<*]) |
                      (function\s+) |
                      ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
                    )) |
                    ((async\s*)?(
                      ((<\s*$)|([\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
                      # sure shot arrow functions even if => is on new line
                  (
                    (<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
                    [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
                    (
                      ([)]\s*:) |                                                                 # ():
                      ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                               # [(]param: | [(]...param:
                    )
                  ) |

                  # arrow function possible to detect only with => on same line

                  (
                    (<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
                    \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
                    (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
                    \s*=>                                                                                               # arrow operator
                  )
                    ))
                  )))
              captures:
                  "0":
                      name: meta.object-literal.key.js
                  "1":
                      name: entity.name.function.js
            - name: meta.object.member.js
              match: (?:[_$[:alpha:]][_$[:alnum:]]*)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:)
              captures:
                  "0":
                      name: meta.object-literal.key.js
            - name: meta.object.member.js
              begin: \.\.\.
              beginCaptures:
                  "0":
                      name: keyword.operator.spread.js
              end: (?=,|\})
              patterns:
                  - include: "#expression"
            - name: meta.object.member.js
              match: ([_$[:alpha:]][_$[:alnum:]]*)\s*(?=,|\}|$|\/\/|\/\*)
              captures:
                  "1":
                      name: variable.other.readwrite.js
            - name: meta.object.member.js
              match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(as)\s+(const)(?=\s*([,}]|$))
              captures:
                  "1":
                      name: keyword.control.as.js
                  "2":
                      name: storage.modifier.js
            - name: meta.object.member.js
              begin: (?=[_$[:alpha:]][_$[:alnum:]]*\s*=)
              end: (?=,|\}|$|\/\/|\/\*)
              patterns:
                  - include: "#expression"
            - name: meta.object.member.js
              begin: ":"
              beginCaptures:
                  "0":
                      name: meta.object-literal.key.js punctuation.separator.key-value.js
              end: (?=,|\})
              patterns:
                  - begin: (?<=:)\s*(async)?\s*(?=\<\s*$)
                    beginCaptures:
                        "1":
                            name: storage.modifier.async.js
                    end: (?<=\>)
                  - include: "#expression"
            - include: "#punctuation-comma"
    ternary-expression:
        begin: \s*(then)
        beginCaptures:
            "1":
                name: keyword.operator.ternary.js
        end: \s*(else)
        endCaptures:
            "1":
                name: keyword.operator.ternary.js
        patterns:
            - include: "#expression"
    function-call:
        patterns:
            - begin: (?=(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))\s*(?:(\?\.\s*)|(\!))?((<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?\())
              end: (?<=\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))\s*(?:(\?\.\s*)|(\!))?((<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?\())
              patterns:
                  - name: meta.function-call.js
                    begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))
                    end: (?=\s*(?:(\?\.\s*)|(\!))?((<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))(([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>|\<\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\<\>\,\.\[]|=>|&(?!&)|\|(?!\|)))))([^<>\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?<==)\>)*(?<!=)\>))*(?<!=)\>)*(?<!=)>\s*)?\())
                    patterns:
                        - include: "#function-call-target"
                  - include: "#function-call-optionals"
                  - include: "#paren-expression"
            - begin: (?=(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))(<\s*[\{\[\(]\s*$))
              end: (?<=\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\)]))(<\s*[\{\[\(]\s*$))
              patterns:
                  - name: meta.function-call.js
                    begin: (?=(([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))
                    end: (?=(<\s*[\{\[\(]\s*$))
                    patterns:
                        - include: "#function-call-target"
                  - include: "#function-call-optionals"
    function-call-target:
        patterns:
            - include: "#support-function-call-identifiers"
            - name: entity.name.function.js
              match: (\#?[_$[:alpha:]][_$[:alnum:]]*)
    function-call-optionals:
        patterns:
            - name: meta.function-call.js punctuation.accessor.optional.js
              match: \?\.
    support-function-call-identifiers:
        patterns:
            - include: "#literal"
            - include: "#support-objects"
            - include: "#bound-variable"
            - include: "#slot-variable"
            - include: "#resource-variable"
            - include: "#host-functionality"
            - include: "#object-identifiers"
            - include: "#punctuation-accessor"
    new-expr:
        name: new.expr.js
        begin: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(new)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
        beginCaptures:
            "1":
                name: keyword.operator.new.js
        end: (?<=\))|(?=[;),}\]:?\-\+\>]|\|\||\&\&|\!\=\=|$|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))new(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|((?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))function((\s+[_$[:alpha:]][_$[:alnum:]]*)|(\s*[\(]))))
        patterns:
            - include: "#expression"
    expression-operators:
        patterns:
            - include: "#operator-string-concat"
            - include: "#operator-prefix-not"
            - include: "#operator-infix-call"
            - include: "#operator-infix-call-deprecated"
            - include: "#operator-optional"
            - include: "#operator-trace"
            - name: keyword.operator.new.js
              match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))new(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
            - name: keyword.operator.comparison.js
              match: ==|!=
            - name: keyword.operator.relational.js
              match: <=|>=|<|>
            - match: (?<=[_$[:alnum:]])(\!)\s*(?:(/=)|(?:(/)(?![/*])))
              captures:
                  "1":
                      name: keyword.operator.logical.js
                  "2":
                      name: keyword.operator.assignment.compound.js
                  "3":
                      name: keyword.operator.arithmetic.js
            - name: keyword.operator.logical.js
              match: \!|\?\?|and|or
            - name: keyword.operator.assignment.js
              match: \=
            - name: keyword.operator.arithmetic.js
              match: "%|\\*|/|-|\\+"
            - begin: (?<=[_$[:alnum:])\]])\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)+(?:(/=)|(?:(/)(?![/*]))))
              end: (?:(/=)|(?:(/)(?!\*([^\*]|(\*[^\/]))*\*\/)))
              endCaptures:
                  "1":
                      name: keyword.operator.assignment.compound.js
                  "2":
                      name: keyword.operator.arithmetic.js
            - match: (?<=[_$[:alnum:])\]])\s*(?:(/=)|(?:(/)(?![/*])))
              captures:
                  "1":
                      name: keyword.operator.assignment.compound.js
                  "2":
                      name: keyword.operator.arithmetic.js
    literal:
        patterns:
            - include: "#color-literal"
            - include: "#numeric-literal"
            - include: "#boolean-literal"
            - include: "#null-literal"
            - include: "#undefined-literal"
            - include: "#numericConstant-literal"
            - include: "#array-literal"
    array-literal:
        name: meta.array.literal.js
        begin: \s*(\[)
        beginCaptures:
            "1":
                name: meta.brace.square.js
        end: \]
        endCaptures:
            "0":
                name: meta.brace.square.js
        patterns:
            - include: "#expression"
            - include: "#punctuation-comma"
    numeric-literal:
        patterns:
            - name: constant.numeric.hex.js
              match: \b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$)
              captures:
                  "1":
                      name: storage.type.numeric.bigint.js
            - match: >-
                  (?x)

                  (?<!\$)(?:
                    (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
                    (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
                    (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
                    (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
                    (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
                    (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
                    (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
                    (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
                  )(?!\$)
              captures:
                  "0":
                      name: constant.numeric.decimal.js
                  "1":
                      name: meta.delimiter.decimal.period.js
                  "2":
                      name: storage.type.numeric.bigint.js
                  "3":
                      name: meta.delimiter.decimal.period.js
                  "4":
                      name: storage.type.numeric.bigint.js
                  "5":
                      name: meta.delimiter.decimal.period.js
                  "6":
                      name: storage.type.numeric.bigint.js
                  "7":
                      name: storage.type.numeric.bigint.js
                  "8":
                      name: meta.delimiter.decimal.period.js
                  "9":
                      name: storage.type.numeric.bigint.js
                  "10":
                      name: meta.delimiter.decimal.period.js
                  "11":
                      name: storage.type.numeric.bigint.js
                  "12":
                      name: meta.delimiter.decimal.period.js
                  "13":
                      name: storage.type.numeric.bigint.js
                  "14":
                      name: storage.type.numeric.bigint.js
    boolean-literal:
        patterns:
            - name: constant.language.boolean.true.js
              match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))true(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
            - name: constant.language.boolean.false.js
              match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))false(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    null-literal:
        name: constant.language.null.js
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))null(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    undefined-literal:
        name: constant.language.undefined.js
        match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))undefined(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    numericConstant-literal:
        patterns:
            - name: constant.language.nan.js
              match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))NaN(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
            - name: constant.language.infinity.js
              match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))Infinity(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
    support-objects:
        patterns:
            - match: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(new)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(target)\b(?!\$)
              captures:
                  "1":
                      name: keyword.operator.new.js
                  "2":
                      name: punctuation.accessor.js
                  "3":
                      name: punctuation.accessor.optional.js
                  "4":
                      name: support.variable.property.target.js
    identifiers:
        patterns:
            - include: "#bound-variable"
            - include: "#slot-variable"
            - include: "#resource-variable"
            - include: "#host-functionality"
            - include: "#object-identifiers"
            - match: >-
                  (?x)(?:(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=\s*(
                    ((async\s+)?(
                      (function\s*[(<*]) |
                      (function\s+) |
                      ([_$[:alpha:]][_$[:alnum:]]*\s*=>)
                    )) |
                    ((async\s*)?(
                      ((<\s*$)|([\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
                      # sure shot arrow functions even if => is on new line
                  (
                    (<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?
                    [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
                    (
                      ([)]\s*:) |                                                                                       # ():
                      ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
                    )
                  ) |

                  (
                    [<]\s*[_$[:alpha:]][_$[:alnum:]]*\s+extends\s*[^=>]                                                              # < typeparam extends
                  ) |

                  # arrow function possible to detect only with => on same line

                  (
                    (<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<]|\<\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=<>]|=[^<])*\>)*\>)*>\s*)?                                                                                 # typeparameters
                    \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
                    (\s*:\s*([^<>\(\)\{\}]|\<([^<>]|\<([^<>]|\<[^<>]+\>)+\>)+\>|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
                    \s*=>                                                                                               # arrow operator
                  )
                    ))
                  ))
              captures:
                  "1":
                      name: punctuation.accessor.js
                  "2":
                      name: punctuation.accessor.optional.js
                  "3":
                      name: entity.name.function.js
            - match: (?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])
              captures:
                  "1":
                      name: punctuation.accessor.js
                  "2":
                      name: punctuation.accessor.optional.js
                  "3":
                      name: variable.other.constant.property.js
            - match: (?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(\#?[_$[:alpha:]][_$[:alnum:]]*)
              captures:
                  "1":
                      name: punctuation.accessor.js
                  "2":
                      name: punctuation.accessor.optional.js
                  "3":
                      name: variable.other.property.js
            - name: variable.other.constant.js
              match: ([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])
            - name: variable.other.readwrite.js
              match: "[_$[:alpha:]][_$[:alnum:]]*"
    object-identifiers:
        patterns:
            # - name: support.class.js
            #   match: ([_$[:alpha:]][_$[:alnum:]]*)(?=\s*\??\.\s*prototype\b(?!\$))
            - match: |-
                  (?x)(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(?:
                    (\#?[[:upper:]][_$[:digit:][:upper:]]*) |
                    (\#?[_$[:alpha:]][_$[:alnum:]]*)
                  )(?=\s*\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*)
              captures:
                  "1":
                      name: punctuation.accessor.js
                  "2":
                      name: punctuation.accessor.optional.js
                  "3":
                      name: variable.other.constant.object.property.js
                  "4":
                      name: variable.other.object.property.js
            - match: |-
                  (?x)(?:
                    ([[:upper:]][_$[:digit:][:upper:]]*) |
                    ([_$[:alpha:]][_$[:alnum:]]*)
                  )(?=\s*\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*)
              captures:
                  "1":
                      name: variable.other.constant.object.js
                  "2":
                      name: variable.other.object.js
    punctuation-comma:
        name: punctuation.separator.comma.js
        match: ","
    punctuation-accessor:
        match: (?:(\.)|(\?\.(?!\s*[[:digit:]])))
        captures:
            "1":
                name: punctuation.accessor.js
            "2":
                name: punctuation.accessor.optional.js
    string:
        patterns:
            - include: "#qstring-single"
            - include: "#qstring-double"
            - include: "#qstring-backtick"
            # TODO support template/interpolated strings
    qstring-double:
        name: string.quoted.double.js
        begin: '"'
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.js
        end: (")|((?:[^\\\n])$)
        endCaptures:
            "1":
                name: punctuation.definition.string.end.js
            "2":
                name: invalid.illegal.newline.js
        patterns:
            - include: "#string-character-escape"
    qstring-single:
        name: string.quoted.single.js
        begin: "'"
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.js
        end: (\')|((?:[^\\\n])$)
        endCaptures:
            "1":
                name: punctuation.definition.string.end.js
            "2":
                name: invalid.illegal.newline.js
        patterns:
            - include: "#string-character-escape"
    qstring-backtick:
        name: string.quoted.single.js
        begin: "`"
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.js
        end: (`)|((?:[^\\\n])$)
        endCaptures:
            "1":
                name: punctuation.definition.string.end.js
            "2":
                name: invalid.illegal.newline.js
        patterns:
            - include: "#string-character-escape"
    string-character-escape:
        name: constant.character.escape.js
        match: \\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)
    comment:
        patterns:
            - begin: (^[ ]+)?((//))
              beginCaptures:
                  "1":
                      name: punctuation.whitespace.comment.leading.js
                  "2":
                      name: comment.line.double-slash.js
                  "3":
                      name: punctuation.definition.comment.js
              end: (?=$)
              contentName: comment.line.double-slash.js
    brackets:
        patterns:
            - begin: "{"
              end: "}|(?=\\*/)"
              patterns:
                  - include: "#brackets"
            - begin: \[
              end: \]|(?=\*/)
              patterns:
                  - include: "#brackets"
    paren-expression:
        begin: \(
        beginCaptures:
            "0":
                name: meta.brace.round.js
        end: \)
        endCaptures:
            "0":
                name: meta.brace.round.js
        patterns:
            - include: "#expression"